//
// generated by bindgen (https://github.com/Breush/odin-binding-generator)
//

package raylib_types

import _c "core:c"

RAYLIB_H :: 1;
PI :: 3.142;
DEG2RAD :: 0.017;
RAD2DEG :: 57.296;
MAX_TOUCH_POINTS :: 10;
MAX_SHADER_LOCATIONS :: 32;
MAX_MATERIAL_MAPS :: 12;
LIGHTGRAY := Color { 200, 200, 200, 255 };
GRAY := Color { 130, 130, 130, 255 };
DARKGRAY := Color { 80, 80, 80, 255 };
YELLOW := Color { 253, 249, 0, 255 };
GOLD := Color { 255, 203, 0, 255 };
ORANGE := Color { 255, 161, 0, 255 };
PINK := Color { 255, 109, 194, 255 };
RED := Color { 230, 41, 55, 255 };
MAROON := Color { 190, 33, 55, 255 };
GREEN := Color { 0, 228, 48, 255 };
LIME := Color { 0, 158, 47, 255 };
DARKGREEN := Color { 0, 117, 44, 255 };
SKYBLUE := Color { 102, 191, 255, 255 };
BLUE := Color { 0, 121, 241, 255 };
DARKBLUE := Color { 0, 82, 172, 255 };
PURPLE := Color { 200, 122, 255, 255 };
VIOLET := Color { 135, 60, 190, 255 };
DARKPURPLE := Color { 112, 31, 126, 255 };
BEIGE := Color { 211, 176, 131, 255 };
BROWN := Color { 127, 106, 79, 255 };
DARKBROWN := Color { 76, 63, 47, 255 };
WHITE := Color { 255, 255, 255, 255 };
BLACK := Color { 0, 0, 0, 255 };
BLANK := Color { 0, 0, 0, 0 };
MAGENTA := Color { 255, 0, 255, 255 };
RAYWHITE := Color { 245, 245, 245, 255 };
SpriteFont :: Font;
Camera :: Camera3D;
LOC_MAP_DIFFUSE :: 14;
LOC_MAP_SPECULAR :: 15;
MAP_DIFFUSE :: 0;
MAP_SPECULAR :: 1;

Quaternion :: Vector4;
Texture :: Texture2D;
TextureCubemap :: Texture2D;
RenderTexture :: RenderTexture2D;
Music :: ^MusicData;
ConfigFlag :: AnonymousEnum0;
TraceLogType :: AnonymousEnum1;
KeyboardKey :: AnonymousEnum2;
AndroidButton :: AnonymousEnum3;
MouseButton :: AnonymousEnum4;
GamepadNumber :: AnonymousEnum5;
GamepadPS3Button :: AnonymousEnum6;
GamepadPS3Axis :: AnonymousEnum7;
GamepadXbox360Button :: AnonymousEnum8;
GamepadXbox360Axis :: AnonymousEnum9;
GamepadAndroid :: AnonymousEnum10;
ShaderLocationIndex :: AnonymousEnum11;
ShaderUniformDataType :: AnonymousEnum12;
TexmapIndex :: AnonymousEnum13;
PixelFormat :: AnonymousEnum14;
TextureFilterMode :: AnonymousEnum15;
CubemapLayoutType :: AnonymousEnum16;
TextureWrapMode :: AnonymousEnum17;
FontType :: AnonymousEnum18;
BlendMode :: AnonymousEnum19;
GestureType :: AnonymousEnum20;
CameraMode :: AnonymousEnum21;
CameraType :: AnonymousEnum22;
VrDeviceType :: AnonymousEnum23;
NPatchType :: AnonymousEnum24;
TraceLogCallback :: #type proc();

AnonymousEnum0 :: enum i32 {
    FLAG_SHOW_LOGO = 1,
    FLAG_FULLSCREEN_MODE = 2,
    FLAG_WINDOW_RESIZABLE = 4,
    FLAG_WINDOW_UNDECORATED = 8,
    FLAG_WINDOW_TRANSPARENT = 16,
    FLAG_WINDOW_HIDDEN = 128,
    FLAG_MSAA_4X_HINT = 32,
    FLAG_VSYNC_HINT = 64,
};

AnonymousEnum1 :: enum i32 {
    LOG_ALL,
    LOG_TRACE,
    LOG_DEBUG,
    LOG_INFO,
    LOG_WARNING,
    LOG_ERROR,
    LOG_FATAL,
    LOG_NONE,
};

AnonymousEnum2 :: enum i32 {
    KEY_APOSTROPHE = 39,
    KEY_COMMA = 44,
    KEY_MINUS = 45,
    KEY_PERIOD = 46,
    KEY_SLASH = 47,
    KEY_ZERO = 48,
    KEY_ONE = 49,
    KEY_TWO = 50,
    KEY_THREE = 51,
    KEY_FOUR = 52,
    KEY_FIVE = 53,
    KEY_SIX = 54,
    KEY_SEVEN = 55,
    KEY_EIGHT = 56,
    KEY_NINE = 57,
    KEY_SEMICOLON = 59,
    KEY_EQUAL = 61,
    KEY_A = 65,
    KEY_B = 66,
    KEY_C = 67,
    KEY_D = 68,
    KEY_E = 69,
    KEY_F = 70,
    KEY_G = 71,
    KEY_H = 72,
    KEY_I = 73,
    KEY_J = 74,
    KEY_K = 75,
    KEY_L = 76,
    KEY_M = 77,
    KEY_N = 78,
    KEY_O = 79,
    KEY_P = 80,
    KEY_Q = 81,
    KEY_R = 82,
    KEY_S = 83,
    KEY_T = 84,
    KEY_U = 85,
    KEY_V = 86,
    KEY_W = 87,
    KEY_X = 88,
    KEY_Y = 89,
    KEY_Z = 90,
    KEY_SPACE = 32,
    KEY_ESCAPE = 256,
    KEY_ENTER = 257,
    KEY_TAB = 258,
    KEY_BACKSPACE = 259,
    KEY_INSERT = 260,
    KEY_DELETE = 261,
    KEY_RIGHT = 262,
    KEY_LEFT = 263,
    KEY_DOWN = 264,
    KEY_UP = 265,
    KEY_PAGE_UP = 266,
    KEY_PAGE_DOWN = 267,
    KEY_HOME = 268,
    KEY_END = 269,
    KEY_CAPS_LOCK = 280,
    KEY_SCROLL_LOCK = 281,
    KEY_NUM_LOCK = 282,
    KEY_PRINT_SCREEN = 283,
    KEY_PAUSE = 284,
    KEY_F1 = 290,
    KEY_F2 = 291,
    KEY_F3 = 292,
    KEY_F4 = 293,
    KEY_F5 = 294,
    KEY_F6 = 295,
    KEY_F7 = 296,
    KEY_F8 = 297,
    KEY_F9 = 298,
    KEY_F10 = 299,
    KEY_F11 = 300,
    KEY_F12 = 301,
    KEY_LEFT_SHIFT = 340,
    KEY_LEFT_CONTROL = 341,
    KEY_LEFT_ALT = 342,
    KEY_LEFT_SUPER = 343,
    KEY_RIGHT_SHIFT = 344,
    KEY_RIGHT_CONTROL = 345,
    KEY_RIGHT_ALT = 346,
    KEY_RIGHT_SUPER = 347,
    KEY_KB_MENU = 348,
    KEY_LEFT_BRACKET = 91,
    KEY_BACKSLASH = 92,
    KEY_RIGHT_BRACKET = 93,
    KEY_GRAVE = 96,
    KEY_KP_0 = 320,
    KEY_KP_1 = 321,
    KEY_KP_2 = 322,
    KEY_KP_3 = 323,
    KEY_KP_4 = 324,
    KEY_KP_5 = 325,
    KEY_KP_6 = 326,
    KEY_KP_7 = 327,
    KEY_KP_8 = 328,
    KEY_KP_9 = 329,
    KEY_KP_DECIMAL = 330,
    KEY_KP_DIVIDE = 331,
    KEY_KP_MULTIPLY = 332,
    KEY_KP_SUBTRACT = 333,
    KEY_KP_ADD = 334,
    KEY_KP_ENTER = 335,
    KEY_KP_EQUAL = 336,
};

AnonymousEnum3 :: enum i32 {
    KEY_BACK = 4,
    KEY_MENU = 82,
    KEY_VOLUME_UP = 24,
    KEY_VOLUME_DOWN = 25,
};

AnonymousEnum4 :: enum i32 {
    MOUSE_LEFT_BUTTON = 0,
    MOUSE_RIGHT_BUTTON = 1,
    MOUSE_MIDDLE_BUTTON = 2,
};

AnonymousEnum5 :: enum i32 {
    GAMEPAD_PLAYER1 = 0,
    GAMEPAD_PLAYER2 = 1,
    GAMEPAD_PLAYER3 = 2,
    GAMEPAD_PLAYER4 = 3,
};

AnonymousEnum6 :: enum i32 {
    GAMEPAD_PS3_BUTTON_TRIANGLE = 0,
    GAMEPAD_PS3_BUTTON_CIRCLE = 1,
    GAMEPAD_PS3_BUTTON_CROSS = 2,
    GAMEPAD_PS3_BUTTON_SQUARE = 3,
    GAMEPAD_PS3_BUTTON_L1 = 6,
    GAMEPAD_PS3_BUTTON_R1 = 7,
    GAMEPAD_PS3_BUTTON_L2 = 4,
    GAMEPAD_PS3_BUTTON_R2 = 5,
    GAMEPAD_PS3_BUTTON_START = 8,
    GAMEPAD_PS3_BUTTON_SELECT = 9,
    GAMEPAD_PS3_BUTTON_PS = 12,
    GAMEPAD_PS3_BUTTON_UP = 24,
    GAMEPAD_PS3_BUTTON_RIGHT = 25,
    GAMEPAD_PS3_BUTTON_DOWN = 26,
    GAMEPAD_PS3_BUTTON_LEFT = 27,
};

AnonymousEnum7 :: enum i32 {
    GAMEPAD_PS3_AXIS_LEFT_X = 0,
    GAMEPAD_PS3_AXIS_LEFT_Y = 1,
    GAMEPAD_PS3_AXIS_RIGHT_X = 2,
    GAMEPAD_PS3_AXIS_RIGHT_Y = 5,
    GAMEPAD_PS3_AXIS_L2 = 3,
    GAMEPAD_PS3_AXIS_R2 = 4,
};

AnonymousEnum8 :: enum i32 {
    GAMEPAD_XBOX_BUTTON_A = 0,
    GAMEPAD_XBOX_BUTTON_B = 1,
    GAMEPAD_XBOX_BUTTON_X = 2,
    GAMEPAD_XBOX_BUTTON_Y = 3,
    GAMEPAD_XBOX_BUTTON_LB = 4,
    GAMEPAD_XBOX_BUTTON_RB = 5,
    GAMEPAD_XBOX_BUTTON_SELECT = 6,
    GAMEPAD_XBOX_BUTTON_START = 7,
    GAMEPAD_XBOX_BUTTON_HOME = 8,
    GAMEPAD_XBOX_BUTTON_UP = 10,
    GAMEPAD_XBOX_BUTTON_RIGHT = 11,
    GAMEPAD_XBOX_BUTTON_DOWN = 12,
    GAMEPAD_XBOX_BUTTON_LEFT = 13,
};

AnonymousEnum9 :: enum i32 {
    GAMEPAD_XBOX_AXIS_LEFT_X = 0,
    GAMEPAD_XBOX_AXIS_LEFT_Y = 1,
    GAMEPAD_XBOX_AXIS_RIGHT_X = 2,
    GAMEPAD_XBOX_AXIS_RIGHT_Y = 3,
    GAMEPAD_XBOX_AXIS_LT = 4,
    GAMEPAD_XBOX_AXIS_RT = 5,
};

AnonymousEnum10 :: enum i32 {
    GAMEPAD_ANDROID_DPAD_UP = 19,
    GAMEPAD_ANDROID_DPAD_DOWN = 20,
    GAMEPAD_ANDROID_DPAD_LEFT = 21,
    GAMEPAD_ANDROID_DPAD_RIGHT = 22,
    GAMEPAD_ANDROID_DPAD_CENTER = 23,
    GAMEPAD_ANDROID_BUTTON_A = 96,
    GAMEPAD_ANDROID_BUTTON_B = 97,
    GAMEPAD_ANDROID_BUTTON_C = 98,
    GAMEPAD_ANDROID_BUTTON_X = 99,
    GAMEPAD_ANDROID_BUTTON_Y = 100,
    GAMEPAD_ANDROID_BUTTON_Z = 101,
    GAMEPAD_ANDROID_BUTTON_L1 = 102,
    GAMEPAD_ANDROID_BUTTON_R1 = 103,
    GAMEPAD_ANDROID_BUTTON_L2 = 104,
    GAMEPAD_ANDROID_BUTTON_R2 = 105,
};

AnonymousEnum11 :: enum i32 {
    LOC_VERTEX_POSITION = 0,
    LOC_VERTEX_TEXCOORD01,
    LOC_VERTEX_TEXCOORD02,
    LOC_VERTEX_NORMAL,
    LOC_VERTEX_TANGENT,
    LOC_VERTEX_COLOR,
    LOC_MATRIX_MVP,
    LOC_MATRIX_MODEL,
    LOC_MATRIX_VIEW,
    LOC_MATRIX_PROJECTION,
    LOC_VECTOR_VIEW,
    LOC_COLOR_DIFFUSE,
    LOC_COLOR_SPECULAR,
    LOC_COLOR_AMBIENT,
    LOC_MAP_ALBEDO,
    LOC_MAP_METALNESS,
    LOC_MAP_NORMAL,
    LOC_MAP_ROUGHNESS,
    LOC_MAP_OCCLUSION,
    LOC_MAP_EMISSION,
    LOC_MAP_HEIGHT,
    LOC_MAP_CUBEMAP,
    LOC_MAP_IRRADIANCE,
    LOC_MAP_PREFILTER,
    LOC_MAP_BRDF,
};

AnonymousEnum12 :: enum i32 {
    UNIFORM_FLOAT = 0,
    UNIFORM_VEC2,
    UNIFORM_VEC3,
    UNIFORM_VEC4,
    UNIFORM_INT,
    UNIFORM_IVEC2,
    UNIFORM_IVEC3,
    UNIFORM_IVEC4,
    UNIFORM_SAMPLER2D,
};

AnonymousEnum13 :: enum i32 {
    MAP_ALBEDO = 0,
    MAP_METALNESS = 1,
    MAP_NORMAL = 2,
    MAP_ROUGHNESS = 3,
    MAP_OCCLUSION,
    MAP_EMISSION,
    MAP_HEIGHT,
    MAP_CUBEMAP,
    MAP_IRRADIANCE,
    MAP_PREFILTER,
    MAP_BRDF,
};

AnonymousEnum14 :: enum i32 {
    UNCOMPRESSED_GRAYSCALE = 1,
    UNCOMPRESSED_GRAY_ALPHA,
    UNCOMPRESSED_R5G6B5,
    UNCOMPRESSED_R8G8B8,
    UNCOMPRESSED_R5G5B5A1,
    UNCOMPRESSED_R4G4B4A4,
    UNCOMPRESSED_R8G8B8A8,
    UNCOMPRESSED_R32,
    UNCOMPRESSED_R32G32B32,
    UNCOMPRESSED_R32G32B32A32,
    COMPRESSED_DXT1_RGB,
    COMPRESSED_DXT1_RGBA,
    COMPRESSED_DXT3_RGBA,
    COMPRESSED_DXT5_RGBA,
    COMPRESSED_ETC1_RGB,
    COMPRESSED_ETC2_RGB,
    COMPRESSED_ETC2_EAC_RGBA,
    COMPRESSED_PVRT_RGB,
    COMPRESSED_PVRT_RGBA,
    COMPRESSED_ASTC_4x4_RGBA,
    COMPRESSED_ASTC_8x8_RGBA,
};

AnonymousEnum15 :: enum i32 {
    FILTER_POINT = 0,
    FILTER_BILINEAR,
    FILTER_TRILINEAR,
    FILTER_ANISOTROPIC_4X,
    FILTER_ANISOTROPIC_8X,
    FILTER_ANISOTROPIC_16X,
};

AnonymousEnum16 :: enum i32 {
    CUBEMAP_AUTO_DETECT = 0,
    CUBEMAP_LINE_VERTICAL,
    CUBEMAP_LINE_HORIZONTAL,
    CUBEMAP_CROSS_THREE_BY_FOUR,
    CUBEMAP_CROSS_FOUR_BY_THREE,
    CUBEMAP_PANORAMA,
};

AnonymousEnum17 :: enum i32 {
    WRAP_REPEAT = 0,
    WRAP_CLAMP,
    WRAP_MIRROR_REPEAT,
    WRAP_MIRROR_CLAMP,
};

AnonymousEnum18 :: enum i32 {
    FONT_DEFAULT = 0,
    FONT_BITMAP,
    FONT_SDF,
};

AnonymousEnum19 :: enum i32 {
    BLEND_ALPHA = 0,
    BLEND_ADDITIVE,
    BLEND_MULTIPLIED,
};

AnonymousEnum20 :: enum i32 {
    GESTURE_NONE = 0,
    GESTURE_TAP = 1,
    GESTURE_DOUBLETAP = 2,
    GESTURE_HOLD = 4,
    GESTURE_DRAG = 8,
    GESTURE_SWIPE_RIGHT = 16,
    GESTURE_SWIPE_LEFT = 32,
    GESTURE_SWIPE_UP = 64,
    GESTURE_SWIPE_DOWN = 128,
    GESTURE_PINCH_IN = 256,
    GESTURE_PINCH_OUT = 512,
};

AnonymousEnum21 :: enum i32 {
    CAMERA_CUSTOM = 0,
    CAMERA_FREE,
    CAMERA_ORBITAL,
    CAMERA_FIRST_PERSON,
    CAMERA_THIRD_PERSON,
};

AnonymousEnum22 :: enum i32 {
    CAMERA_PERSPECTIVE = 0,
    CAMERA_ORTHOGRAPHIC,
};

AnonymousEnum23 :: enum i32 {
    HMD_DEFAULT_DEVICE = 0,
    HMD_OCULUS_RIFT_DK2,
    HMD_OCULUS_RIFT_CV1,
    HMD_OCULUS_GO,
    HMD_VALVE_HTC_VIVE,
    HMD_SONY_PSVR,
};

AnonymousEnum24 :: enum i32 {
    NPT_9PATCH = 0,
    NPT_3PATCH_VERTICAL,
    NPT_3PATCH_HORIZONTAL,
};

Vector2 :: struct #packed {
    x : _c.float,
    y : _c.float,
};

Vector3 :: struct #packed {
    x : _c.float,
    y : _c.float,
    z : _c.float,
};

Vector4 :: struct #packed {
    x : _c.float,
    y : _c.float,
    z : _c.float,
    w : _c.float,
};

Matrix :: struct #packed {
    m0 : _c.float,
    m1 : _c.float,
    m2 : _c.float,
    m3 : _c.float,
    m4 : _c.float,
    m5 : _c.float,
    m6 : _c.float,
    m7 : _c.float,
    m8 : _c.float,
    m9 : _c.float,
    m10 : _c.float,
    m11 : _c.float,
    m12 : _c.float,
    m13 : _c.float,
    m14 : _c.float,
    m15 : _c.float,
};

Color :: struct #packed {
    r : _c.uchar,
    g : _c.uchar,
    b : _c.uchar,
    a : _c.uchar,
};

Rectangle :: struct #packed {
    x : _c.float,
    y : _c.float,
    width : _c.float,
    height : _c.float,
};

Image :: struct #packed {
    data : rawptr,
    width : _c.int,
    height : _c.int,
    mipmaps : _c.int,
    format : _c.int,
};

Texture2D :: struct #packed {
    id : _c.uint,
    width : _c.int,
    height : _c.int,
    mipmaps : _c.int,
    format : _c.int,
};

RenderTexture2D :: struct #packed {
    id : _c.uint,
    texture : Texture2D,
    depth : Texture2D,
    depth_texture : bool,
};

NPatchInfo :: struct #packed {
    source_rec : Rectangle,
    left : _c.int,
    top : _c.int,
    right : _c.int,
    bottom : _c.int,
    type : _c.int,
};

CharInfo :: struct #packed {
    value : _c.int,
    rec : Rectangle,
    offset_x : _c.int,
    offset_y : _c.int,
    advance_x : _c.int,
    data : ^_c.uchar,
};

Font :: struct #packed {
    texture : Texture2D,
    base_size : _c.int,
    chars_count : _c.int,
    chars : ^CharInfo,
};

Camera3D :: struct #packed {
    position : Vector3,
    target : Vector3,
    up : Vector3,
    fovy : _c.float,
    type : _c.int,
};

Camera2D :: struct #packed {
    offset : Vector2,
    target : Vector2,
    rotation : _c.float,
    zoom : _c.float,
};

BoundingBox :: struct #packed {
    min : Vector3,
    max : Vector3,
};

Mesh :: struct #packed {
    vertex_count : _c.int,
    triangle_count : _c.int,
    vertices : ^_c.float,
    texcoords : ^_c.float,
    texcoords2 : ^_c.float,
    normals : ^_c.float,
    tangents : ^_c.float,
    colors : ^_c.uchar,
    indices : ^_c.ushort,
    base_vertices : ^_c.float,
    base_normals : ^_c.float,
    weight_bias : ^_c.float,
    weight_id : ^_c.int,
    vao_id : _c.uint,
    vbo_id : [7]_c.uint,
};

Shader :: struct #packed {
    id : _c.uint,
    locs : [32]_c.int,
};

MaterialMap :: struct #packed {
    texture : Texture2D,
    color : Color,
    value : _c.float,
};

Material :: struct #packed {
    shader : Shader,
    maps : [12]MaterialMap,
    params : ^_c.float,
};

Model :: struct #packed {
    mesh : Mesh,
    transform : Matrix,
    material : Material,
};

Ray :: struct #packed {
    position : Vector3,
    direction : Vector3,
};

RayHitInfo :: struct #packed {
    hit : bool,
    distance : _c.float,
    position : Vector3,
    normal : Vector3,
};

Wave :: struct #packed {
    sample_count : _c.uint,
    sample_rate : _c.uint,
    sample_size : _c.uint,
    channels : _c.uint,
    data : rawptr,
};

Sound :: struct #packed {
    audio_buffer : rawptr,
    source : _c.uint,
    buffer : _c.uint,
    format : _c.int,
};

MusicData :: struct #packed {};

AudioStream :: struct #packed {
    sample_rate : _c.uint,
    sample_size : _c.uint,
    channels : _c.uint,
    audio_buffer : rawptr,
    format : _c.int,
    source : _c.uint,
    buffers : [2]_c.uint,
};

VrDeviceInfo :: struct #packed {
    h_resolution : _c.int,
    v_resolution : _c.int,
    h_screen_size : _c.float,
    v_screen_size : _c.float,
    v_screen_center : _c.float,
    eye_to_screen_distance : _c.float,
    lens_separation_distance : _c.float,
    interpupillary_distance : _c.float,
    lens_distortion_values : [4]_c.float,
    chroma_ab_correction : [4]_c.float,
};

VrStereoConfig :: struct #packed {
    stereo_fbo : RenderTexture2D,
    distortion_shader : Shader,
    eyes_projection : [2]Matrix,
    eyes_view_offset : [2]Matrix,
    eye_viewport_right : [4]_c.int,
    eye_viewport_left : [4]_c.int,
};

raylib_Funcs :: struct {
    init_window : proc "c" (
        width : _c.int,
        height : _c.int,
        title : cstring
    ),
    window_should_close : proc "c" () -> bool,
    close_window : proc "c" (),
    is_window_ready : proc "c" () -> bool,
    is_window_minimized : proc "c" () -> bool,
    is_window_resized : proc "c" () -> bool,
    is_window_hidden : proc "c" () -> bool,
    toggle_fullscreen : proc "c" (),
    unhide_window : proc "c" (),
    hide_window : proc "c" (),
    set_window_icon : proc "c" (image : Image),
    set_window_title : proc "c" (title : cstring),
    set_window_position : proc "c" (
        x : _c.int,
        y : _c.int
    ),
    set_window_monitor : proc "c" (monitor : _c.int),
    set_window_min_size : proc "c" (
        width : _c.int,
        height : _c.int
    ),
    set_window_size : proc "c" (
        width : _c.int,
        height : _c.int
    ),
    get_window_handle : proc "c" () -> rawptr,
    get_screen_width : proc "c" () -> _c.int,
    get_screen_height : proc "c" () -> _c.int,
    get_monitor_count : proc "c" () -> _c.int,
    get_monitor_width : proc "c" (monitor : _c.int) -> _c.int,
    get_monitor_height : proc "c" (monitor : _c.int) -> _c.int,
    get_monitor_physical_width : proc "c" (monitor : _c.int) -> _c.int,
    get_monitor_physical_height : proc "c" (monitor : _c.int) -> _c.int,
    get_monitor_name : proc "c" (monitor : _c.int) -> cstring,
    get_clipboard_text : proc "c" () -> cstring,
    set_clipboard_text : proc "c" (text : cstring),
    is_cursor_hidden : proc "c" () -> bool,
    enable_cursor : proc "c" (),
    disable_cursor : proc "c" (),
    clear_background : proc "c" (color : Color),
    begin_drawing : proc "c" (),
    end_drawing : proc "c" (),
    begin_mode2_d : proc "c" (camera : Camera2D),
    end_mode2_d : proc "c" (),
    begin_mode3_d : proc "c" (camera : Camera3D),
    end_mode3_d : proc "c" (),
    begin_texture_mode : proc "c" (target : RenderTexture2D),
    end_texture_mode : proc "c" (),
    get_mouse_ray : proc "c" (
        mouse_position : Vector2,
        camera : Camera
    ) -> Ray,
    get_world_to_screen : proc "c" (
        position : Vector3,
        camera : Camera
    ) -> Vector2,
    get_camera_matrix : proc "c" (camera : Camera) -> Matrix,
    set_target_fps : proc "c" (fps : _c.int),
    get_fps : proc "c" () -> _c.int,
    get_frame_time : proc "c" () -> _c.float,
    get_time : proc "c" () -> _c.double,
    color_to_int : proc "c" (color : Color) -> _c.int,
    color_normalize : proc "c" (color : Color) -> Vector4,
    color_to_hsv : proc "c" (color : Color) -> Vector3,
    color_from_hsv : proc "c" (hsv : Vector3) -> Color,
    get_color : proc "c" (hex_value : _c.int) -> Color,
    fade : proc "c" (
        color : Color,
        alpha : _c.float
    ) -> Color,
    set_config_flags : proc "c" (flags : _c.uchar),
    set_trace_log_level : proc "c" (log_type : _c.int),
    set_trace_log_exit : proc "c" (log_type : _c.int),
    set_trace_log_callback : proc "c" (callback : TraceLogCallback),
    trace_log : proc "c" (
        log_type : _c.int,
        text : cstring
    ),
    take_screenshot : proc "c" (file_name : cstring),
    get_random_value : proc "c" (
        min : _c.int,
        max : _c.int
    ) -> _c.int,
    file_exists : proc "c" (file_name : cstring) -> bool,
    is_file_extension : proc "c" (
        file_name : cstring,
        ext : cstring
    ) -> bool,
    get_extension : proc "c" (file_name : cstring) -> cstring,
    get_file_name : proc "c" (file_path : cstring) -> cstring,
    get_file_name_without_ext : proc "c" (file_path : cstring) -> cstring,
    get_directory_path : proc "c" (file_name : cstring) -> cstring,
    get_working_directory : proc "c" () -> cstring,
    get_directory_files : proc "c" (
        dir_path : cstring,
        count : ^_c.int
    ) -> ^cstring,
    clear_directory_files : proc "c" (),
    change_directory : proc "c" (dir : cstring) -> bool,
    is_file_dropped : proc "c" () -> bool,
    get_dropped_files : proc "c" (count : ^_c.int) -> ^cstring,
    clear_dropped_files : proc "c" (),
    get_file_mod_time : proc "c" (file_name : cstring) -> _c.long,
    storage_save_value : proc "c" (
        position : _c.int,
        value : _c.int
    ),
    storage_load_value : proc "c" (position : _c.int) -> _c.int,
    open_url : proc "c" (url : cstring),
    is_key_pressed : proc "c" (key : KeyboardKey) -> bool,
    is_key_down : proc "c" (key : KeyboardKey) -> bool,
    is_key_released : proc "c" (key : KeyboardKey) -> bool,
    is_key_up : proc "c" (key : KeyboardKey) -> bool,
    get_key_pressed : proc "c" () -> _c.int,
    set_exit_key : proc "c" (key : KeyboardKey),
    is_gamepad_available : proc "c" (gamepad : _c.int) -> bool,
    is_gamepad_name : proc "c" (
        gamepad : _c.int,
        name : cstring
    ) -> bool,
    get_gamepad_name : proc "c" (gamepad : _c.int) -> cstring,
    is_gamepad_button_pressed : proc "c" (
        gamepad : _c.int,
        button : _c.int
    ) -> bool,
    is_gamepad_button_down : proc "c" (
        gamepad : _c.int,
        button : _c.int
    ) -> bool,
    is_gamepad_button_released : proc "c" (
        gamepad : _c.int,
        button : _c.int
    ) -> bool,
    is_gamepad_button_up : proc "c" (
        gamepad : _c.int,
        button : _c.int
    ) -> bool,
    get_gamepad_button_pressed : proc "c" () -> _c.int,
    get_gamepad_axis_count : proc "c" (gamepad : _c.int) -> _c.int,
    get_gamepad_axis_movement : proc "c" (
        gamepad : _c.int,
        axis : _c.int
    ) -> _c.float,
    is_mouse_button_pressed : proc "c" (button : _c.int) -> bool,
    is_mouse_button_down : proc "c" (button : _c.int) -> bool,
    is_mouse_button_released : proc "c" (button : _c.int) -> bool,
    is_mouse_button_up : proc "c" (button : _c.int) -> bool,
    get_mouse_x : proc "c" () -> _c.int,
    get_mouse_y : proc "c" () -> _c.int,
    get_mouse_position : proc "c" () -> Vector2,
    set_mouse_position : proc "c" (
        x : _c.int,
        y : _c.int
    ),
    set_mouse_offset : proc "c" (
        offset_x : _c.int,
        offset_y : _c.int
    ),
    set_mouse_scale : proc "c" (
        scale_x : _c.float,
        scale_y : _c.float
    ),
    get_mouse_wheel_move : proc "c" () -> _c.int,
    get_touch_x : proc "c" () -> _c.int,
    get_touch_y : proc "c" () -> _c.int,
    get_touch_position : proc "c" (index : _c.int) -> Vector2,
    set_gestures_enabled : proc "c" (gesture_flags : _c.uint),
    is_gesture_detected : proc "c" (gesture : _c.int) -> bool,
    get_gesture_detected : proc "c" () -> _c.int,
    get_touch_points_count : proc "c" () -> _c.int,
    get_gesture_hold_duration : proc "c" () -> _c.float,
    get_gesture_drag_vector : proc "c" () -> Vector2,
    get_gesture_drag_angle : proc "c" () -> _c.float,
    get_gesture_pinch_vector : proc "c" () -> Vector2,
    get_gesture_pinch_angle : proc "c" () -> _c.float,
    set_camera_mode : proc "c" (
        camera : Camera,
        mode : _c.int
    ),
    update_camera : proc "c" (camera : ^Camera),
    set_camera_pan_control : proc "c" (pan_key : _c.int),
    set_camera_alt_control : proc "c" (alt_key : _c.int),
    set_camera_smooth_zoom_control : proc "c" (sz_key : _c.int),
    set_camera_move_controls : proc "c" (
        front_key : _c.int,
        back_key : _c.int,
        right_key : _c.int,
        left_key : _c.int,
        up_key : _c.int,
        down_key : _c.int
    ),
    draw_pixel : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        color : Color
    ),
    draw_pixel_v : proc "c" (
        position : Vector2,
        color : Color
    ),
    draw_line : proc "c" (
        start_pos_x : _c.int,
        start_pos_y : _c.int,
        end_pos_x : _c.int,
        end_pos_y : _c.int,
        color : Color
    ),
    draw_line_v : proc "c" (
        start_pos : Vector2,
        end_pos : Vector2,
        color : Color
    ),
    draw_line_ex : proc "c" (
        start_pos : Vector2,
        end_pos : Vector2,
        thick : _c.float,
        color : Color
    ),
    draw_line_bezier : proc "c" (
        start_pos : Vector2,
        end_pos : Vector2,
        thick : _c.float,
        color : Color
    ),
    draw_circle : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color : Color
    ),
    draw_circle_sector : proc "c" (
        center : Vector2,
        radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        color : Color
    ),
    draw_circle_gradient : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color1 : Color,
        color2 : Color
    ),
    draw_circle_v : proc "c" (
        center : Vector2,
        radius : _c.float,
        color : Color
    ),
    draw_circle_lines : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color : Color
    ),
    draw_rectangle : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ),
    draw_rectangle_v : proc "c" (
        position : Vector2,
        size : Vector2,
        color : Color
    ),
    draw_rectangle_rec : proc "c" (
        rec : Rectangle,
        color : Color
    ),
    draw_rectangle_pro : proc "c" (
        rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        color : Color
    ),
    draw_rectangle_gradient_v : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color1 : Color,
        color2 : Color
    ),
    draw_rectangle_gradient_h : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color1 : Color,
        color2 : Color
    ),
    draw_rectangle_gradient_ex : proc "c" (
        rec : Rectangle,
        col1 : Color,
        col2 : Color,
        col3 : Color,
        col4 : Color
    ),
    draw_rectangle_lines : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ),
    draw_rectangle_lines_ex : proc "c" (
        rec : Rectangle,
        line_thick : _c.int,
        color : Color
    ),
    draw_triangle : proc "c" (
        v1 : Vector2,
        v2 : Vector2,
        v3 : Vector2,
        color : Color
    ),
    draw_triangle_lines : proc "c" (
        v1 : Vector2,
        v2 : Vector2,
        v3 : Vector2,
        color : Color
    ),
    draw_poly : proc "c" (
        center : Vector2,
        sides : _c.int,
        radius : _c.float,
        rotation : _c.float,
        color : Color
    ),
    draw_poly_ex : proc "c" (
        points : ^Vector2,
        num_points : _c.int,
        color : Color
    ),
    draw_poly_ex_lines : proc "c" (
        points : ^Vector2,
        num_points : _c.int,
        color : Color
    ),
    set_shapes_texture : proc "c" (
        texture : Texture2D,
        source : Rectangle
    ),
    check_collision_recs : proc "c" (
        rec1 : Rectangle,
        rec2 : Rectangle
    ) -> bool,
    check_collision_circles : proc "c" (
        center1 : Vector2,
        radius1 : _c.float,
        center2 : Vector2,
        radius2 : _c.float
    ) -> bool,
    check_collision_circle_rec : proc "c" (
        center : Vector2,
        radius : _c.float,
        rec : Rectangle
    ) -> bool,
    get_collision_rec : proc "c" (
        rec1 : Rectangle,
        rec2 : Rectangle
    ) -> Rectangle,
    check_collision_point_rec : proc "c" (
        point : Vector2,
        rec : Rectangle
    ) -> bool,
    check_collision_point_circle : proc "c" (
        point : Vector2,
        center : Vector2,
        radius : _c.float
    ) -> bool,
    check_collision_point_triangle : proc "c" (
        point : Vector2,
        p1 : Vector2,
        p2 : Vector2,
        p3 : Vector2
    ) -> bool,
    load_image : proc "c" (file_name : cstring) -> Image,
    load_image_ex : proc "c" (
        pixels : ^Color,
        width : _c.int,
        height : _c.int
    ) -> Image,
    load_image_pro : proc "c" (
        data : rawptr,
        width : _c.int,
        height : _c.int,
        format : _c.int
    ) -> Image,
    load_image_raw : proc "c" (
        file_name : cstring,
        width : _c.int,
        height : _c.int,
        format : _c.int,
        header_size : _c.int
    ) -> Image,
    export_image : proc "c" (
        image : Image,
        file_name : cstring
    ),
    export_image_as_code : proc "c" (
        image : Image,
        file_name : cstring
    ),
    load_texture : proc "c" (file_name : cstring) -> Texture2D,
    load_texture_from_image : proc "c" (image : Image) -> Texture2D,
    load_texture_cubemap : proc "c" (
        image : Image,
        layout_type : _c.int
    ) -> TextureCubemap,
    load_render_texture : proc "c" (
        width : _c.int,
        height : _c.int
    ) -> RenderTexture2D,
    unload_image : proc "c" (image : Image),
    unload_texture : proc "c" (texture : Texture2D),
    unload_render_texture : proc "c" (target : RenderTexture2D),
    get_image_data : proc "c" (image : Image) -> ^Color,
    get_image_data_normalized : proc "c" (image : Image) -> ^Vector4,
    get_pixel_data_size : proc "c" (
        width : _c.int,
        height : _c.int,
        format : _c.int
    ) -> _c.int,
    get_texture_data : proc "c" (texture : Texture2D) -> Image,
    get_screen_data : proc "c" () -> Image,
    update_texture : proc "c" (
        texture : Texture2D,
        pixels : rawptr
    ),
    image_copy : proc "c" (image : Image) -> Image,
    image_to_pot : proc "c" (
        image : ^Image,
        fill_color : Color
    ),
    image_format : proc "c" (
        image : ^Image,
        new_format : _c.int
    ),
    image_alpha_mask : proc "c" (
        image : ^Image,
        alpha_mask : Image
    ),
    image_alpha_clear : proc "c" (
        image : ^Image,
        color : Color,
        threshold : _c.float
    ),
    image_alpha_crop : proc "c" (
        image : ^Image,
        threshold : _c.float
    ),
    image_alpha_premultiply : proc "c" (image : ^Image),
    image_crop : proc "c" (
        image : ^Image,
        crop : Rectangle
    ),
    image_resize : proc "c" (
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int
    ),
    image_resize_nn : proc "c" (
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int
    ),
    image_resize_canvas : proc "c" (
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int,
        offset_x : _c.int,
        offset_y : _c.int,
        color : Color
    ),
    image_mipmaps : proc "c" (image : ^Image),
    image_dither : proc "c" (
        image : ^Image,
        r_bpp : _c.int,
        g_bpp : _c.int,
        b_bpp : _c.int,
        a_bpp : _c.int
    ),
    image_extract_palette : proc "c" (
        image : Image,
        max_palette_size : _c.int,
        extract_count : ^_c.int
    ) -> ^Color,
    image_text : proc "c" (
        text : cstring,
        font_size : _c.int,
        color : Color
    ) -> Image,
    image_text_ex : proc "c" (
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float,
        tint : Color
    ) -> Image,
    image_draw : proc "c" (
        dst : ^Image,
        src : Image,
        src_rec : Rectangle,
        dst_rec : Rectangle
    ),
    image_draw_rectangle : proc "c" (
        dst : ^Image,
        rec : Rectangle,
        color : Color
    ),
    image_draw_rectangle_lines : proc "c" (
        dst : ^Image,
        rec : Rectangle,
        thick : _c.int,
        color : Color
    ),
    image_draw_text : proc "c" (
        dst : ^Image,
        position : Vector2,
        text : cstring,
        font_size : _c.int,
        color : Color
    ),
    image_draw_text_ex : proc "c" (
        dst : ^Image,
        position : Vector2,
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float,
        color : Color
    ),
    image_flip_vertical : proc "c" (image : ^Image),
    image_flip_horizontal : proc "c" (image : ^Image),
    image_rotate_cw : proc "c" (image : ^Image),
    image_rotate_ccw : proc "c" (image : ^Image),
    image_color_tint : proc "c" (
        image : ^Image,
        color : Color
    ),
    image_color_invert : proc "c" (image : ^Image),
    image_color_grayscale : proc "c" (image : ^Image),
    image_color_contrast : proc "c" (
        image : ^Image,
        contrast : _c.float
    ),
    image_color_brightness : proc "c" (
        image : ^Image,
        brightness : _c.int
    ),
    image_color_replace : proc "c" (
        image : ^Image,
        color : Color,
        replace : Color
    ),
    gen_image_color : proc "c" (
        width : _c.int,
        height : _c.int,
        color : Color
    ) -> Image,
    gen_image_gradient_v : proc "c" (
        width : _c.int,
        height : _c.int,
        top : Color,
        bottom : Color
    ) -> Image,
    gen_image_gradient_h : proc "c" (
        width : _c.int,
        height : _c.int,
        left : Color,
        right : Color
    ) -> Image,
    gen_image_gradient_radial : proc "c" (
        width : _c.int,
        height : _c.int,
        density : _c.float,
        inner : Color,
        outer : Color
    ) -> Image,
    gen_image_checked : proc "c" (
        width : _c.int,
        height : _c.int,
        checks_x : _c.int,
        checks_y : _c.int,
        col1 : Color,
        col2 : Color
    ) -> Image,
    gen_image_white_noise : proc "c" (
        width : _c.int,
        height : _c.int,
        factor : _c.float
    ) -> Image,
    gen_image_perlin_noise : proc "c" (
        width : _c.int,
        height : _c.int,
        offset_x : _c.int,
        offset_y : _c.int,
        scale : _c.float
    ) -> Image,
    gen_image_cellular : proc "c" (
        width : _c.int,
        height : _c.int,
        tile_size : _c.int
    ) -> Image,
    gen_texture_mipmaps : proc "c" (texture : ^Texture2D),
    set_texture_filter : proc "c" (
        texture : Texture2D,
        filter_mode : _c.int
    ),
    set_texture_wrap : proc "c" (
        texture : Texture2D,
        wrap_mode : _c.int
    ),
    draw_texture : proc "c" (
        texture : Texture2D,
        pos_x : _c.int,
        pos_y : _c.int,
        tint : Color
    ),
    draw_texture_v : proc "c" (
        texture : Texture2D,
        position : Vector2,
        tint : Color
    ),
    draw_texture_ex : proc "c" (
        texture : Texture2D,
        position : Vector2,
        rotation : _c.float,
        scale : _c.float,
        tint : Color
    ),
    draw_texture_rec : proc "c" (
        texture : Texture2D,
        source_rec : Rectangle,
        position : Vector2,
        tint : Color
    ),
    draw_texture_quad : proc "c" (
        texture : Texture2D,
        tiling : Vector2,
        offset : Vector2,
        quad : Rectangle,
        tint : Color
    ),
    draw_texture_pro : proc "c" (
        texture : Texture2D,
        source_rec : Rectangle,
        dest_rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        tint : Color
    ),
    draw_texture_n_patch : proc "c" (
        texture : Texture2D,
        n_patch_info : NPatchInfo,
        dest_rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        tint : Color
    ),
    get_font_default : proc "c" () -> Font,
    load_font : proc "c" (file_name : cstring) -> Font,
    load_font_ex : proc "c" (
        file_name : cstring,
        font_size : _c.int,
        font_chars : ^_c.int,
        chars_count : _c.int
    ) -> Font,
    load_font_from_image : proc "c" (
        image : Image,
        key : Color,
        first_char : _c.int
    ) -> Font,
    load_font_data : proc "c" (
        file_name : cstring,
        font_size : _c.int,
        font_chars : ^_c.int,
        chars_count : _c.int,
        type : _c.int
    ) -> ^CharInfo,
    gen_image_font_atlas : proc "c" (
        chars : ^CharInfo,
        chars_count : _c.int,
        font_size : _c.int,
        padding : _c.int,
        pack_method : _c.int
    ) -> Image,
    unload_font : proc "c" (font : Font),
    draw_fps : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int
    ),
    draw_text : proc "c" (
        text : cstring,
        pos_x : _c.int,
        pos_y : _c.int,
        font_size : _c.int,
        color : Color
    ),
    draw_text_ex : proc "c" (
        font : Font,
        text : cstring,
        position : Vector2,
        font_size : _c.float,
        spacing : _c.float,
        tint : Color
    ),
    draw_text_rec : proc "c" (
        font : Font,
        text : cstring,
        rec : Rectangle,
        font_size : _c.float,
        spacing : _c.float,
        word_wrap : bool,
        tint : Color
    ),
    draw_text_rec_ex : proc "c" (
        font : Font,
        text : cstring,
        rec : Rectangle,
        font_size : _c.float,
        spacing : _c.float,
        word_wrap : bool,
        tint : Color,
        select_start : _c.int,
        select_length : _c.int,
        select_text : Color,
        select_back : Color
    ),
    measure_text : proc "c" (
        text : cstring,
        font_size : _c.int
    ) -> _c.int,
    measure_text_ex : proc "c" (
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float
    ) -> Vector2,
    get_glyph_index : proc "c" (
        font : Font,
        character : _c.int
    ) -> _c.int,
    text_is_equal : proc "c" (
        text1 : cstring,
        text2 : cstring
    ) -> bool,
    text_length : proc "c" (text : cstring) -> _c.uint,
    text_format : proc "c" (text : cstring) -> cstring,
    text_subtext : proc "c" (
        text : cstring,
        position : _c.int,
        length : _c.int
    ) -> cstring,
    text_replace : proc "c" (
        text : cstring,
        replace : cstring,
        by : cstring
    ) -> cstring,
    text_insert : proc "c" (
        text : cstring,
        insert : cstring,
        position : _c.int
    ) -> cstring,
    text_join : proc "c" (
        text_list : ^cstring,
        count : _c.int,
        delimiter : cstring
    ) -> cstring,
    text_split : proc "c" (
        text : cstring,
        delimiter : _c.char,
        count : ^_c.int
    ) -> ^cstring,
    text_append : proc "c" (
        text : cstring,
        append : cstring,
        position : ^_c.int
    ),
    text_find_index : proc "c" (
        text : cstring,
        find : cstring
    ) -> _c.int,
    text_to_upper : proc "c" (text : cstring) -> cstring,
    text_to_lower : proc "c" (text : cstring) -> cstring,
    text_to_pascal : proc "c" (text : cstring) -> cstring,
    text_to_integer : proc "c" (text : cstring) -> _c.int,
    draw_line3_d : proc "c" (
        start_pos : Vector3,
        end_pos : Vector3,
        color : Color
    ),
    draw_circle3_d : proc "c" (
        center : Vector3,
        radius : _c.float,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        color : Color
    ),
    draw_cube : proc "c" (
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ),
    draw_cube_v : proc "c" (
        position : Vector3,
        size : Vector3,
        color : Color
    ),
    draw_cube_wires : proc "c" (
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ),
    draw_cube_wires_v : proc "c" (
        position : Vector3,
        size : Vector3,
        color : Color
    ),
    draw_cube_texture : proc "c" (
        texture : Texture2D,
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ),
    draw_sphere : proc "c" (
        center_pos : Vector3,
        radius : _c.float,
        color : Color
    ),
    draw_sphere_ex : proc "c" (
        center_pos : Vector3,
        radius : _c.float,
        rings : _c.int,
        slices : _c.int,
        color : Color
    ),
    draw_sphere_wires : proc "c" (
        center_pos : Vector3,
        radius : _c.float,
        rings : _c.int,
        slices : _c.int,
        color : Color
    ),
    draw_cylinder : proc "c" (
        position : Vector3,
        radius_top : _c.float,
        radius_bottom : _c.float,
        height : _c.float,
        slices : _c.int,
        color : Color
    ),
    draw_cylinder_wires : proc "c" (
        position : Vector3,
        radius_top : _c.float,
        radius_bottom : _c.float,
        height : _c.float,
        slices : _c.int,
        color : Color
    ),
    draw_plane : proc "c" (
        center_pos : Vector3,
        size : Vector2,
        color : Color
    ),
    draw_ray : proc "c" (
        ray : Ray,
        color : Color
    ),
    draw_grid : proc "c" (
        slices : _c.int,
        spacing : _c.float
    ),
    draw_gizmo : proc "c" (position : Vector3),
    load_model : proc "c" (file_name : cstring) -> Model,
    load_model_from_mesh : proc "c" (mesh : Mesh) -> Model,
    unload_model : proc "c" (model : Model),
    load_mesh : proc "c" (file_name : cstring) -> Mesh,
    unload_mesh : proc "c" (mesh : ^Mesh),
    export_mesh : proc "c" (
        mesh : Mesh,
        file_name : cstring
    ),
    mesh_bounding_box : proc "c" (mesh : Mesh) -> BoundingBox,
    mesh_tangents : proc "c" (mesh : ^Mesh),
    mesh_binormals : proc "c" (mesh : ^Mesh),
    gen_mesh_poly : proc "c" (
        sides : _c.int,
        radius : _c.float
    ) -> Mesh,
    gen_mesh_plane : proc "c" (
        width : _c.float,
        length : _c.float,
        res_x : _c.int,
        res_z : _c.int
    ) -> Mesh,
    gen_mesh_cube : proc "c" (
        width : _c.float,
        height : _c.float,
        length : _c.float
    ) -> Mesh,
    gen_mesh_sphere : proc "c" (
        radius : _c.float,
        rings : _c.int,
        slices : _c.int
    ) -> Mesh,
    gen_mesh_hemi_sphere : proc "c" (
        radius : _c.float,
        rings : _c.int,
        slices : _c.int
    ) -> Mesh,
    gen_mesh_cylinder : proc "c" (
        radius : _c.float,
        height : _c.float,
        slices : _c.int
    ) -> Mesh,
    gen_mesh_torus : proc "c" (
        radius : _c.float,
        size : _c.float,
        rad_seg : _c.int,
        sides : _c.int
    ) -> Mesh,
    gen_mesh_knot : proc "c" (
        radius : _c.float,
        size : _c.float,
        rad_seg : _c.int,
        sides : _c.int
    ) -> Mesh,
    gen_mesh_heightmap : proc "c" (
        heightmap : Image,
        size : Vector3
    ) -> Mesh,
    gen_mesh_cubicmap : proc "c" (
        cubicmap : Image,
        cube_size : Vector3
    ) -> Mesh,
    load_material : proc "c" (file_name : cstring) -> Material,
    load_material_default : proc "c" () -> Material,
    unload_material : proc "c" (material : Material),
    draw_model : proc "c" (
        model : Model,
        position : Vector3,
        scale : _c.float,
        tint : Color
    ),
    draw_model_ex : proc "c" (
        model : Model,
        position : Vector3,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        scale : Vector3,
        tint : Color
    ),
    draw_model_wires : proc "c" (
        model : Model,
        position : Vector3,
        scale : _c.float,
        tint : Color
    ),
    draw_model_wires_ex : proc "c" (
        model : Model,
        position : Vector3,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        scale : Vector3,
        tint : Color
    ),
    draw_bounding_box : proc "c" (
        box : BoundingBox,
        color : Color
    ),
    draw_billboard : proc "c" (
        camera : Camera,
        texture : Texture2D,
        center : Vector3,
        size : _c.float,
        tint : Color
    ),
    draw_billboard_rec : proc "c" (
        camera : Camera,
        texture : Texture2D,
        source_rec : Rectangle,
        center : Vector3,
        size : _c.float,
        tint : Color
    ),
    check_collision_spheres : proc "c" (
        center_a : Vector3,
        radius_a : _c.float,
        center_b : Vector3,
        radius_b : _c.float
    ) -> bool,
    check_collision_boxes : proc "c" (
        box1 : BoundingBox,
        box2 : BoundingBox
    ) -> bool,
    check_collision_box_sphere : proc "c" (
        box : BoundingBox,
        center_sphere : Vector3,
        radius_sphere : _c.float
    ) -> bool,
    check_collision_ray_sphere : proc "c" (
        ray : Ray,
        sphere_position : Vector3,
        sphere_radius : _c.float
    ) -> bool,
    check_collision_ray_sphere_ex : proc "c" (
        ray : Ray,
        sphere_position : Vector3,
        sphere_radius : _c.float,
        collision_point : ^Vector3
    ) -> bool,
    check_collision_ray_box : proc "c" (
        ray : Ray,
        box : BoundingBox
    ) -> bool,
    get_collision_ray_model : proc "c" (
        ray : Ray,
        model : ^Model
    ) -> RayHitInfo,
    get_collision_ray_triangle : proc "c" (
        ray : Ray,
        p1 : Vector3,
        p2 : Vector3,
        p3 : Vector3
    ) -> RayHitInfo,
    get_collision_ray_ground : proc "c" (
        ray : Ray,
        ground_height : _c.float
    ) -> RayHitInfo,
    load_text : proc "c" (file_name : cstring) -> cstring,
    load_shader : proc "c" (
        vs_file_name : cstring,
        fs_file_name : cstring
    ) -> Shader,
    load_shader_code : proc "c" (
        vs_code : cstring,
        fs_code : cstring
    ) -> Shader,
    unload_shader : proc "c" (shader : Shader),
    get_shader_default : proc "c" () -> Shader,
    get_texture_default : proc "c" () -> Texture2D,
    get_shader_location : proc "c" (
        shader : Shader,
        uniform_name : cstring
    ) -> _c.int,
    set_shader_value : proc "c" (
        shader : Shader,
        uniform_loc : _c.int,
        value : rawptr,
        uniform_type : _c.int
    ),
    set_shader_value_v : proc "c" (
        shader : Shader,
        uniform_loc : _c.int,
        value : rawptr,
        uniform_type : _c.int,
        count : _c.int
    ),
    set_shader_value_matrix : proc "c" (
        shader : Shader,
        uniform_loc : _c.int,
        mat : Matrix
    ),
    set_matrix_projection : proc "c" (proj : Matrix),
    set_matrix_modelview : proc "c" (view : Matrix),
    get_matrix_modelview : proc "c" () -> Matrix,
    gen_texture_cubemap : proc "c" (
        shader : Shader,
        sky_hdr : Texture2D,
        size : _c.int
    ) -> Texture2D,
    gen_texture_irradiance : proc "c" (
        shader : Shader,
        cubemap : Texture2D,
        size : _c.int
    ) -> Texture2D,
    gen_texture_prefilter : proc "c" (
        shader : Shader,
        cubemap : Texture2D,
        size : _c.int
    ) -> Texture2D,
    gen_texture_brdf : proc "c" (
        shader : Shader,
        size : _c.int
    ) -> Texture2D,
    begin_shader_mode : proc "c" (shader : Shader),
    end_shader_mode : proc "c" (),
    begin_blend_mode : proc "c" (mode : _c.int),
    end_blend_mode : proc "c" (),
    begin_scissor_mode : proc "c" (
        x : _c.int,
        y : _c.int,
        width : _c.int,
        height : _c.int
    ),
    end_scissor_mode : proc "c" (),
    get_vr_device_info : proc "c" (vr_device_type : _c.int) -> VrDeviceInfo,
    init_vr_simulator : proc "c" (info : VrDeviceInfo),
    update_vr_tracking : proc "c" (camera : ^Camera),
    close_vr_simulator : proc "c" (),
    is_vr_simulator_ready : proc "c" () -> bool,
    toggle_vr_mode : proc "c" (),
    begin_vr_drawing : proc "c" (),
    end_vr_drawing : proc "c" (),
    init_audio_device : proc "c" (),
    close_audio_device : proc "c" (),
    is_audio_device_ready : proc "c" () -> bool,
    set_master_volume : proc "c" (volume : _c.float),
    load_wave : proc "c" (file_name : cstring) -> Wave,
    load_wave_ex : proc "c" (
        data : rawptr,
        sample_count : _c.int,
        sample_rate : _c.int,
        sample_size : _c.int,
        channels : _c.int
    ) -> Wave,
    load_sound : proc "c" (file_name : cstring) -> Sound,
    load_sound_from_wave : proc "c" (wave : Wave) -> Sound,
    update_sound : proc "c" (
        sound : Sound,
        data : rawptr,
        samples_count : _c.int
    ),
    unload_wave : proc "c" (wave : Wave),
    unload_sound : proc "c" (sound : Sound),
    export_wave : proc "c" (
        wave : Wave,
        file_name : cstring
    ),
    export_wave_as_code : proc "c" (
        wave : Wave,
        file_name : cstring
    ),
    play_sound : proc "c" (sound : Sound),
    pause_sound : proc "c" (sound : Sound),
    resume_sound : proc "c" (sound : Sound),
    stop_sound : proc "c" (sound : Sound),
    is_sound_playing : proc "c" (sound : Sound) -> bool,
    set_sound_volume : proc "c" (
        sound : Sound,
        volume : _c.float
    ),
    set_sound_pitch : proc "c" (
        sound : Sound,
        pitch : _c.float
    ),
    wave_format : proc "c" (
        wave : ^Wave,
        sample_rate : _c.int,
        sample_size : _c.int,
        channels : _c.int
    ),
    wave_copy : proc "c" (wave : Wave) -> Wave,
    wave_crop : proc "c" (
        wave : ^Wave,
        init_sample : _c.int,
        final_sample : _c.int
    ),
    get_wave_data : proc "c" (wave : Wave) -> ^_c.float,
    load_music_stream : proc "c" (file_name : cstring) -> Music,
    unload_music_stream : proc "c" (music : Music),
    play_music_stream : proc "c" (music : Music),
    update_music_stream : proc "c" (music : Music),
    stop_music_stream : proc "c" (music : Music),
    pause_music_stream : proc "c" (music : Music),
    resume_music_stream : proc "c" (music : Music),
    is_music_playing : proc "c" (music : Music) -> bool,
    set_music_volume : proc "c" (
        music : Music,
        volume : _c.float
    ),
    set_music_pitch : proc "c" (
        music : Music,
        pitch : _c.float
    ),
    set_music_loop_count : proc "c" (
        music : Music,
        count : _c.int
    ),
    get_music_time_length : proc "c" (music : Music) -> _c.float,
    get_music_time_played : proc "c" (music : Music) -> _c.float,
    init_audio_stream : proc "c" (
        sample_rate : _c.uint,
        sample_size : _c.uint,
        channels : _c.uint
    ) -> AudioStream,
    update_audio_stream : proc "c" (
        stream : AudioStream,
        data : rawptr,
        samples_count : _c.int
    ),
    close_audio_stream : proc "c" (stream : AudioStream),
    is_audio_buffer_processed : proc "c" (stream : AudioStream) -> bool,
    play_audio_stream : proc "c" (stream : AudioStream),
    pause_audio_stream : proc "c" (stream : AudioStream),
    resume_audio_stream : proc "c" (stream : AudioStream),
    is_audio_stream_playing : proc "c" (stream : AudioStream) -> bool,
    stop_audio_stream : proc "c" (stream : AudioStream),
    set_audio_stream_volume : proc "c" (
        stream : AudioStream,
        volume : _c.float
    ),
    set_audio_stream_pitch : proc "c" (
        stream : AudioStream,
        pitch : _c.float
    ),
}

